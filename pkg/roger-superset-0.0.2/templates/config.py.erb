"""The main config file for Superset
All configuration in this file can be overridden by providing a superset_config
in your PYTHONPATH as there is a ``from superset_config import *``
at the end of this file.
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import imp
import json
import os
import sys
from collections import OrderedDict

from dateutil import tz
from flask_appbuilder.security.manager import AUTH_DB

from superset.stats_logger import DummyStatsLogger

# Realtime stats logger, a StatsD implementation exists
STATS_LOGGER = <%= @stats_logger %>

BASE_DIR = os.path.abspath(os.path.dirname(__file__))
if 'SUPERSET_HOME' in os.environ:
    DATA_DIR = os.environ['SUPERSET_HOME']
else:
    DATA_DIR = os.path.join(os.path.expanduser('~'), '.superset')
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)

# ---------------------------------------------------------
# Superset specific config
# ---------------------------------------------------------
PACKAGE_DIR = os.path.join(BASE_DIR, 'static', 'assets')
PACKAGE_FILE = os.path.join(PACKAGE_DIR, 'package.json')
with open(PACKAGE_FILE) as package_file:
    VERSION_STRING = json.load(package_file)['version']

ROW_LIMIT = <%= @row_limit %>
VIZ_ROW_LIMIT = <%= @viz_row_limit %>
SUPERSET_WORKERS = <%= @superset_workers %>
SUPERSET_CELERY_WORKERS = <%= @superset_celery_workers %>

SUPERSET_WEBSERVER_ADDRESS = '<%= @superset_webserver_address %>'
SUPERSET_WEBSERVER_PORT = <%= @superset_webserver_port %>
SUPERSET_WEBSERVER_TIMEOUT = <%= @superset_webserver_timeout %>
EMAIL_NOTIFICATIONS = <%= @email_notifications %>
CUSTOM_SECURITY_MANAGER = <%= @custom_security_manager %>
SQLALCHEMY_TRACK_MODIFICATIONS = <%= @sqlalchemy_track_modifications %>
# ---------------------------------------------------------

# Your App secret key
SECRET_KEY = '<%= @secre_key %>'  # noqa

# The SQLAlchemy connection string.
SQLALCHEMY_DATABASE_URI = '<%= @dburi %>'
# SQLALCHEMY_DATABASE_URI = 'mysql://myapp@localhost/myapp'
# SQLALCHEMY_DATABASE_URI = 'postgresql://root:password@localhost/myapp'

# The limit of queries fetched for query search
QUERY_SEARCH_LIMIT = <%= @query_search_limit %>

# Flask-WTF flag for CSRF
WTF_CSRF_ENABLED = <%= @wtf_csrf_enabled %>

# Whether to run the web server in debug mode or not
DEBUG = <%= @debug %>
FLASK_USE_RELOAD = <%= @flask_use_reload %>

# Whether to show the stacktrace on 500 error
SHOW_STACKTRACE = <%= @show_stacktrace %>

# Extract and use X-Forwarded-For/X-Forwarded-Proto headers?
ENABLE_PROXY_FIX = <%= @enable_proxy_fix %>

# ------------------------------
# GLOBALS FOR APP Builder
# ------------------------------
# Uncomment to setup Your App name
APP_NAME = "<%= @app_name %>"

# Uncomment to setup an App icon
APP_ICON = "<%= @app_icon %>"

# Druid query timezone
# tz.tzutc() : Using utc timezone
# tz.tzlocal() : Using local timezone
# tz.gettz('Asia/Shanghai') : Using the time zone with specific name
# [TimeZone List]
# See: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
# other tz can be overridden by providing a local_config
DRUID_IS_ACTIVE = <%= @druid_is_active %>
DRUID_TZ = <%= @druid_tz %>
DRUID_ANALYSIS_TYPES = ['<%= @druid_analysis_types %>']

# ----------------------------------------------------
# AUTHENTICATION CONFIG
# ----------------------------------------------------
# The authentication type
# AUTH_OID : Is for OpenID
# AUTH_DB : Is for database (username/password()
# AUTH_LDAP : Is for LDAP
# AUTH_REMOTE_USER : Is for using REMOTE_USER from web server
# AUTH_TYPE = <%= @auth_type %>

# Uncomment to setup Full admin role name
# AUTH_ROLE_ADMIN = 'Admin'

# Uncomment to setup Public role name, no authentication needed
# AUTH_ROLE_PUBLIC = 'Public'

# Will allow user self registration
# AUTH_USER_REGISTRATION = True

# The default user self registration role
# AUTH_USER_REGISTRATION_ROLE = "Public"

# When using LDAP Auth, setup the ldap server
AUTH_LDAP_SERVER = "<%= @ldap %>"

# Uncomment to setup OpenID providers example for OpenID authentication
# OPENID_PROVIDERS = [
#    { 'name': 'Yahoo', 'url': 'https://me.yahoo.com' },
#    { 'name': 'AOL', 'url': 'http://openid.aol.com/<username>' },
#    { 'name': 'Flickr', 'url': 'http://www.flickr.com/<username>' },
#    { 'name': 'MyOpenID', 'url': 'https://www.myopenid.com' }]

# ---------------------------------------------------
# Roles config
# ---------------------------------------------------
# Grant public role the same set of permissions as for the GAMMA role.
# This is useful if one wants to enable anonymous users to view
# dashboards. Explicit grant on specific datasets is still required.
PUBLIC_ROLE_LIKE_GAMMA = <%= @public_role_line_gamma %>

# ---------------------------------------------------
# Babel config for translations
# ---------------------------------------------------
# Setup default language
BABEL_DEFAULT_LOCALE = 'en'
# Your application default translation path
BABEL_DEFAULT_FOLDER = 'babel/translations'
# The allowed translation for you app
LANGUAGES = {
    'en': {'flag': 'us', 'name': 'English'},
    'it': {'flag': 'it', 'name': 'Italian'},
    # 'fr': {'flag': 'fr', 'name': 'French'},
    # 'zh': {'flag': 'cn', 'name': 'Chinese'},
}
# ---------------------------------------------------
# Image and file configuration
# ---------------------------------------------------
# The file upload folder, when using models with files
UPLOAD_FOLDER = BASE_DIR + '<%= @upload_folder %>'

# The image upload folder, when using models with images
IMG_UPLOAD_FOLDER = BASE_DIR + '<%= @img_upload_folder %>'

# The image upload url, when using models with images
IMG_UPLOAD_URL = '<%= @img_upload_url %>'
# Setup image size default is (300, 200, True)
# IMG_SIZE = (300, 200, True)

CACHE_DEFAULT_TIMEOUT = <%= @cache_default_timeout %>
CACHE_CONFIG = {<%= @cache_config %>}
TABLE_NAMES_CACHE_CONFIG = {<%= @table_names_cache_config %>}

# CORS Options
ENABLE_CORS = <%= @enable_cors %>
CORS_OPTIONS = {<%= @cors_options %>}


# ---------------------------------------------------
# List of viz_types not allowed in your environment
# For example: Blacklist pivot table and treemap:
#  VIZ_TYPE_BLACKLIST = ['pivot_table', 'treemap']
# ---------------------------------------------------

VIZ_TYPE_BLACKLIST = [<%= @viz_type_blacklist %>]

# ---------------------------------------------------
# List of data sources not to be refreshed in druid cluster
# ---------------------------------------------------

DRUID_DATA_SOURCE_BLACKLIST = [<%= @druid_data_source_blacklist %>]

# --------------------------------------------------
# Modules, datasources and middleware to be registered
# --------------------------------------------------
DEFAULT_MODULE_DS_MAP = OrderedDict([
    ('superset.connectors.sqla.models', ['SqlaTable']),
    ('superset.connectors.druid.models', ['DruidDatasource']),
])
ADDITIONAL_MODULE_DS_MAP = {<%= @additional_module_ds_map %>}
ADDITIONAL_MIDDLEWARE = [<%= @additional_middleware %>]

"""
1) http://docs.python-guide.org/en/latest/writing/logging/
2) https://docs.python.org/2/library/logging.config.html
"""

# Console Log Settings

LOG_FORMAT = '<%= @log_format %>'
LOG_LEVEL = '<%= @log_level %>'

# ---------------------------------------------------
# Enable Time Rotate Log Handler
# ---------------------------------------------------
# LOG_LEVEL = DEBUG, INFO, WARNING, ERROR, CRITICAL

ENABLE_TIME_ROTATE = <%= @enable_time_rotate %>
TIME_ROTATE_LOG_LEVEL = '<%= @time_rotate_log_devel %>'
FILENAME = <%= @filename %>
ROLLOVER = '<%= @rollover %>'
INTERVAL = <%= @inteval %>
BACKUP_COUNT = <%= @backup_count %>

# Set this API key to enable Mapbox visualizations
MAPBOX_API_KEY = "<%= @mapbox_api_key %>"

# Maximum number of rows returned in the SQL editor
SQL_MAX_ROW = <%= @sql_max_row %>
DISPLAY_SQL_MAX_ROW = <%= @displa_sql_max_row %>

# Maximum number of tables/views displayed in the dropdown window in SQL Lab.
MAX_TABLE_NAMES = <%= @max_table_names %>

# If defined, shows this text in an alert-warning box in the navbar
# one example use case may be "STAGING" to make it clear that this is
# not the production version of the site.
WARNING_MSG = <%= @warning_msg %>

# Default celery config is to use SQLA as a broker, in a production setting
# you'll want to use a proper broker as specified here:
# http://docs.celeryproject.org/en/latest/getting-started/brokers/index.html
# Example:
<% if @enable_celery == 'True' -%>
  class CeleryConfig(object):
    BROKER_URL = '<%= @broker_url %>'
    CELERY_IMPORTS = (<%= @celery_imports %>)
    CELERY_RESULT_BACKEND = '<%= @celery_result_backend %>'
    CELERY_ANNOTATIONS = {<%= @celery_annotations %>}
    CELERYD_LOG_LEVEL = '<%= @celeryd_log_level %>'
    CELERYD_PREFETCH_MULTIPLIER = <%= @celeryd_prefetch_multiplier %>
    CELERY_ACKS_LATE = <%= @celery_acks_late %>
  CELERY_CONFIG = <%= @celery_config %>
<% end -%>
CELERY_CONFIG = <%= @celery_config %>
SQL_CELERY_DB_FILE_PATH = <%= @sql_celery_db_file_path %>
SQL_CELERY_RESULTS_DB_FILE_PATH = <%= @sql_celery_results_db_file_path %>

# static http headers to be served by your Superset server.
# The following example prevents iFrame from other domains
# and "clickjacking" as a result
# HTTP_HEADERS = {'X-Frame-Options': 'SAMEORIGIN'}
HTTP_HEADERS = {<%= @http_headers %>}

# The db id here results in selecting this one as a default in SQL Lab
DEFAULT_DB_ID = <%= @default_db_id %>

# Timeout duration for SQL Lab synchronous queries
SQLLAB_TIMEOUT = <%= @sqllab_timeout %>

# SQLLAB_DEFAULT_DBID
SQLLAB_DEFAULT_DBID = <%= @sqllab_default_dbid %>

# The MAX duration (in seconds) a query can run for before being killed
# by celery.
SQLLAB_ASYNC_TIME_LIMIT_SEC = <%= @sqllab_async_time_limit_sec %>

# An instantiated derivative of werkzeug.contrib.cache.BaseCache
# if enabled, it can be used to store the results of long-running queries
# in SQL Lab by using the "Run Async" button/feature
RESULTS_BACKEND = <%= @results_backend %>

# A dictionary of items that gets merged into the Jinja context for
# SQL Lab. The existing context gets updated with this dictionary,
# meaning values for existing keys get overwritten by the content of this
# dictionary.
JINJA_CONTEXT_ADDONS = {<%= @jinja_context_addons %>}

# Roles that are controlled by the API / Superset and should not be changes
# by humans.
ROBOT_PERMISSION_ROLES = [<%= @robot_permissons_roles %>]

CONFIG_PATH_ENV_VAR = '<%= @config_path_env_var %>'


# smtp server configuration
EMAIL_NOTIFICATIONS = <%= @email_notifications %>  # all the emails are sent using dryrun
SMTP_HOST = '<%= @smtp_host %>'
SMTP_STARTTLS = <%= @smtp_starttls %>
SMTP_SSL = <%= @smtp_ssl %>
SMTP_USER = '<%= @smtp_user %>'
SMTP_PORT = <%= @smtp_port %>
SMTP_PASSWORD = '<%= @smtp_password %>'
SMTP_MAIL_FROM = '<%= @smtp_mail_from %>'

if not CACHE_DEFAULT_TIMEOUT:
    CACHE_DEFAULT_TIMEOUT = CACHE_CONFIG.get('CACHE_DEFAULT_TIMEOUT')

# Whether to bump the logging level to ERRROR on the flask_appbiulder package
# Set to False if/when debugging FAB related issues like
# permission management
SILENCE_FAB = <%= @silence_fab %>


# Integrate external Blueprints to the app by passing them to your
# configuration. These blueprints will get integrated in the app
BLUEPRINTS = [<%= @rollvoer %>]

# Provide a callable that receives a tracking_url and returns another
# URL. This is used to translate internal Hadoop job tracker URL
# into a proxied one
TRACKING_URL_TRANSFORMER = lambda x: x

try:
    if CONFIG_PATH_ENV_VAR in os.environ:
        # Explicitly import config module that is not in pythonpath; useful
        # for case where app is being executed via pex.
        print('Loaded your LOCAL configuration at [{}]'.format(
            os.environ[CONFIG_PATH_ENV_VAR]))
        module = sys.modules[__name__]
        override_conf = imp.load_source('superset_config', os.environ[CONFIG_PATH_ENV_VAR])
        for key in dir(override_conf):
            if key.isupper():
                setattr(module, key, getattr(override_conf, key))

    else:
        from superset_config import *  # noqa
        import superset_config
        print('Loaded your LOCAL configuration at [{}]'.format(
            superset_config.__file__))
except ImportError:
    pass
